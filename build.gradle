plugins {
	id "org.gretty" version "3.0.3"
	id "io.swagger.core.v3.swagger-gradle-plugin" version "2.0.9.1"
//	id 'java'
//	id 'war'
//	id 'org.springframework.boot' version '3.1.5'
//	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.temporary'
version = '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'org.gretty'
mainClassName = 'com.temporary.backend.rest,TemporaryRestApplication'

writeConfiguration()

sourceCompatibility = '1.8'

repositories {
	mavenCentral()

	maven {
		url "https://plugins.gradle.org/m2"
	}
	jcenter()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.session:spring-session-core'
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	runtimeOnly 'com.mysql:mysql-connector-j'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// MySQL database driver
	implementation  group: 'mysql', name: 'mysql-connector-java', version: '8.+'
	implementation 'org.apache.commons:commons-dbcp2:2.8.+'

	// RestEasy, JAX-RS REST API
	implementation group: 'org.jboss.resteasy', name: 'resteasy-jaxb-provider', version: '3.11.0.Final'
	implementation group: 'org.jboss.resteasy', name: 'resteasy-jackson2-provider', version: '3.+'
	implementation group: 'org.jboss.resteasy', name: 'resteasy-multipart-provider', version: '3.+'
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.+'

	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.14.+'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.14.+'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.+'
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.14.+'

	// GSON
	implementation 'javax.xml:jaxrpc:1.1'
	implementation 'com.google.code.gson:gson:2.+'

	// JSON parsing (used in BaseConnector)
	implementation 'org.json:json:+'

	// JWT (JSON Web Tokens) - for authentication
	implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '5.+'
	implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.+'

	// Apache
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.+'
	implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.+'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
	// Quartz - for scheduling jobs
	implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.+'
}

task writeConfig {
	// The config properties come from config.groovy
	println "writing config.properties"
	file("src/main/resources/config.properties").withWriter { writer ->
		writer.writeLine("# Do not edit this file. Make changes in config.groovy and/or build.gradle (writeConfig)")
		writer.writeLine("build="+ new Date())
		config.each {writer.writeLine("$it.key=$it.value")}
	}
}

def writeConfiguration() {
	def environment = hasProperty('env') ? env : 'dev'
	ext.set 'environment', environment
	println "Environment is set to $environment"
	def configFile = file('config.groovy')
	def config = new ConfigSlurper(environment).parse(configFile.toURL())
	ext.set 'config', config
}

war {
	it.dependsOn writeConfig
	zip64 = true
	duplicatesStrategy(DuplicatesStrategy.INCLUDE)
	from 'src/main/webapp/build'
	webInf { from 'src/main/webapp/WEB-INF' }
	archiveFileName = 'temporary.war'
}

resolve {
	outputFileName = 'Temporary'
	outputFormat = 'JSON'
	prettyPrint = 'TRUE'
	classpath = sourceSets.main.runtimeClasspath
	resourcePackages = ['io.test']
	outputDir = file('test')
}